name: Build, Push & Deploy Frontend

permissions:
  id-token: write
  contents: read

on:
  push:
    branches:
      - main

env:
  github_username: meduscode
  aws_ssh_name: aws_cs561
  aws_region: us-west-2
  domain: medus.click
  sub_domain: speedscore
  github_token: ${{ secrets.TOKEN }}
  aws_ssh: ${{ secrets.AWS_CS561_SSH }}
  github_actions_role_arn: ${{ secrets.GH_ACTIONS_ROLE_ARN }}
  certificateArn: ${{ secrets.CERTIFICATE_ARN }}
  PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}

jobs:
  test:
    name: Run Playwright Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Start local server and wait
        run: |
          PORT=5500 npm start &
          SERVER_PID=$!
          echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV
          npx wait-on http://localhost:5500
        env:
          PORT: 5500

      - name: Run login keyboard tests
        run: npx playwright test ./tests/loginKeyboardTests.spec.js

      - name: Run login visual tests
        run: npx playwright test ./tests/loginVisualTests.spec.js

      - name: Run create account dialog keyboard tests
        run: npx playwright test tests/createAccountDialogKeyboardTests.spec.js

      - name: Run create account dialog visual tests
        run: npx playwright test tests/createAccountDialogVisualTests.spec.js

      - name: Run accessibility tests
        run: npx playwright test tests/accessibilityTests.spec.js

      - name: Stop local server
        if: always()
        run: kill $SERVER_PID
        env:
          SERVER_PID: ${{ env.SERVER_PID }}

  build:
    name: Build and push Docker image
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to GHCR
        run: echo "$github_token" | docker login ghcr.io -u "$github_username" --password-stdin

      - name: Build Docker image
        run: docker build -t ghcr.io/$github_username/speedscore-frontend:latest .

      - name: Push Docker image
        run: docker push ghcr.io/$github_username/speedscore-frontend:latest

  infrastructure:
    name: Configure infrastructure with Pulumi
    runs-on: ubuntu-latest
    needs: build

    outputs:
      instance_ip: ${{ steps.get-outputs.outputs.ip }}
      ansible_user: ${{ steps.get-outputs.outputs.user }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ env.github_actions_role_arn }}
          aws-region: us-west-2

      - name: Install dependencies
        working-directory: ./frontend-infrastructure
        run: npm ci

      - name: Configure Pulumi stack
        working-directory: ./frontend-infrastructure
        run: |
          pulumi stack select dev
          pulumi config set aws:region "$aws_region"
          pulumi config set domain "$domain"
          pulumi config set subDomain "$sub_domain"
          pulumi config set sshKeyName "$aws_ssh_name"
          pulumi config set --secret certificateArn "$certificateArn"

      - name: Deploy with Pulumi
        uses: pulumi/actions@v4
        with:
          work-dir: ./frontend-infrastructure
          command: up
          stack-name: MedusCode-org/frontend-infrastructure/dev
        env:
          PULUMI_SUPPRESS_OUTPUTS: "true"

      - name: Get Pulumi outputs
        id: get-outputs
        working-directory: ./frontend-infrastructure
        run: |
          echo "ip=$(pulumi stack output instancePublicIp)" >> $GITHUB_OUTPUT
          echo "user=$(pulumi stack output ansibleUser)" >> $GITHUB_OUTPUT

  deploy:
    name: Deploy app with Ansible
    runs-on: ubuntu-latest
    needs: infrastructure

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup SSH private key
        run: |
          mkdir -p ~/.ssh
          echo "$aws_ssh" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Write inventory file
        run: |
          echo "[all]" > inventory.ini
          echo "${{ needs.infrastructure.outputs.instance_ip }} ansible_user=${{ needs.infrastructure.outputs.ansible_user }} ansible_ssh_private_key_file=~/.ssh/id_rsa" >> inventory.ini

      - name: Run Ansible Playbook
        uses: dawidd6/action-ansible-playbook@v2
        with:
          playbook: ansible/frontend-deploy.yml
          options: >-
            -i inventory.ini
            --extra-vars "github_username=${{ env.github_username }} github_token=${{ env.github_token }}"
          
